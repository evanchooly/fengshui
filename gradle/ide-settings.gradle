allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

project('core') {
    idea.module {
        name = 'core'
        scopes.PROVIDED.plus += configurations.provided
        
        iml {
            withXml { provider ->

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' }
                if (node == null) {
                    node = provider.node.appendNode('component')
                }
                node.replaceNode {
                    component(name: 'CheckStyle-IDEA-Module') {
                        option(name: 'configuration') {
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }

            }
        }
    }
}

idea {
    project {
//        languageLevel = '1.6'
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CheckStyle-IDEA') {
                        option(name: 'configuration') {
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'check-test-classes', value: true)
                                entry(key: 'check-nonjava-files', value: false)
                                entry(key: 'location-0', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'location-1', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }

                node = provider.node.component.find { it.@name == 'CopyrightManager' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CopyrightManager', default: 'Justin Lee') {
                        copyright {
                            option(name: 'notice', value: 'Copyright (c) 2014 - \$today.year Justin Lee, ' +
                                'Inc. <http://mongodb.com>\n\nLicensed under the Apache License, ' +
                                'Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0' +
                                '\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License' +
                                ' is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or' +
                                ' implied.\nSee the License for the specific language governing permissions and\nlimitations' +
                                ' under the License.')
                            option(name: 'keyword', value: 'Copyright')
                            option(name: 'allowReplaceKeyword', value: '')
                            option(name: 'myName', value: 'Justin Lee')
                            option(name: 'myLocal', value: true)
                        }
                        module2copyright {
                            element(module: 'Project Files', copyright: 'Justin Lee')
                        }
                        LanguageOptions(name: 'XML') {
                            option(name: 'fileTypeOverride', value: 1)
                            option(name: 'prefixLines', value: false)
                        }
                    }
                }
            }
            beforeMerged { project ->
                project.modulePaths.clear()
            }
        }
    }
    
    module {
        scopes.PROVIDED.plus += configurations.provided
        downloadSources = true
    } 
}
